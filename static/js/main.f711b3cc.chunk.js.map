{"version":3,"sources":["About/About.tsx","LinkExample/Links.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["About","useState","searchTerm","setSearchTerm","link","setLink","windowOpen","setWindowOpen","useEffect","winObj","window","open","onunload","closed","close","Fragment","className","onSubmit","ev","encodeURI","preventDefault","type","value","onChange","event","target","onClick","App","to","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAEe,SAASA,IACpB,OAAO,4C,WCAI,G,MAAA,WAAa,IAAD,EACWC,mBAAS,IADpB,mBAClBC,EADkB,KACNC,EADM,OAEDF,mBAAS,IAFR,mBAElBG,EAFkB,KAEZC,EAFY,OAGWJ,oBAAS,GAHpB,mBAGlBK,EAHkB,KAGNC,EAHM,KAuBzB,OAnBAC,qBAAU,WACR,IAIMC,EACJH,GAAcF,EACVM,OAAOC,KAAKP,EAJF,SADd,+CAEiB,GAIb,KAMN,OALAM,OAAOE,SAAW,YACZ,OAACH,QAAD,IAACA,OAAD,EAACA,EAAQI,SACL,OAANJ,QAAM,IAANA,KAAQK,SAGL,WACC,OAANL,QAAM,IAANA,KAAQK,QACRJ,OAAOE,SAAW,QAEnB,CAACN,EAAYF,IAEd,kBAAC,IAAMW,SAAP,KACE,sCACA,yBAAKC,UAAU,aACb,yBAAKA,UAAU,SACb,0BACEC,SAAU,SAACC,GACTb,EAAQ,mCAAD,OAC8Bc,UAAUjB,KAE/CK,GAAc,GACdW,EAAGE,mBAGL,uCAEE,2BACEC,KAAK,OACLC,MAAOpB,EACPqB,SAAU,SAACC,GACTrB,EAAcqB,EAAMC,OAAOH,OAC3BjB,EAAQ,QAId,2BAAOgB,KAAK,SAASC,MAAM,YAE5BlB,GACC,4BACEsB,QAAS,WACPnB,GAAc,IAEhBS,UAAU,QAJZ,aCjBGW,MA/Bf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,IAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,SAAT,YAON,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC7B,EAAD,WChBQ8B,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f711b3cc.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function About(){\n    return <h2>About - test</h2>;\n}","import React, { useState, useEffect } from \"react\";\nimport \"./Links.css\";\n\nexport default function () {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [link, setLink] = useState(\"\");\n  const [windowOpen, setWindowOpen] = useState(false);\n  useEffect(() => {\n    const winFeatures =\n      \"screenX=0,screenY=0,top=0,left=0,scrollbars\";\n    const winName = \"window\";\n    const winReplace = true;\n    const winObj =\n      windowOpen && link\n        ? window.open(link, winName, winFeatures, winReplace)\n        : null;\n    window.onunload = function () {\n      if (!winObj?.closed) {\n        winObj?.close();\n      }\n    };\n    return () => {\n      winObj?.close();\n      window.onunload = null;\n    };\n  }, [windowOpen, link]);\n  return (\n    <React.Fragment>\n      <h2>Links!</h2>\n      <div className=\"container\">\n        <div className=\"input\">\n          <form\n            onSubmit={(ev) => {\n              setLink(\n                `https://www.google.com/search?q=${encodeURI(searchTerm)}`\n              );\n              setWindowOpen(false);\n              ev.preventDefault();\n            }}\n          >\n            <label>\n              Name:\n              <input\n                type=\"text\"\n                value={searchTerm}\n                onChange={(event) => {\n                  setSearchTerm(event.target.value);\n                  setLink(\"\");\n                }}\n              />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n          {link && (\n            <button\n              onClick={() => {\n                setWindowOpen(true);\n              }}\n              className=\"link\"\n            >\n              Link\n            </button>\n          )}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport About from \"./About/About\";\nimport Links from \"./LinkExample/Links\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"links\">Links</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/links\">\n            <Links />\n          </Route>\n          <Route path=\"/\">\n            <About />\n          </Route>\n          \n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}